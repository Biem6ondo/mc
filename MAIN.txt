local lua = Instance.new("Folder", workspace)
lua.Name = "Minecraft"
local SETTING = Instance.new("Folder", lua)
SETTING.Name = "SETTING"

if workspace:FindFirstChild("Baseplate") then
workspace.Baseplate:Destroy()
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local cam = workspace.CurrentCamera
local player = Players.LocalPlayer

if not isfolder("TexturePack") then makefolder(".TexturePack") end

local assetCache = {}

local function downloadTexture(name, url)
    local path = ".TexturePack/"..name..".png"
    if not isfile(path) then
        local ok, data = pcall(function() return game:HttpGet(url) end)
        if ok then writefile(path, data) end
    end
    if not assetCache[path] then
        assetCache[path] = getcustomasset(path)
    end
    return assetCache[path]
end

local function convertToTextureID(input, saveName)
    return tonumber(input) and "rbxassetid://"..input or (input:match("^https?://") and downloadTexture(saveName, input) or input)
end

local function createItem(name, top, bottom, right, left, front, back)
local part = Instance.new("Part")
part.Name = name
part.Size = Vector3.new(4,4,4)
part.Anchored = true
part.Transparency = 1
part.Material = Enum.Material.SmoothPlastic
game:GetService("RunService").Heartbeat:Wait()

local faces = {
{Enum.NormalId.Top, top, "_Top"},
{Enum.NormalId.Bottom, bottom, "_Bottom"},
{Enum.NormalId.Right, right, "_Right"},
{Enum.NormalId.Left, left, "_Left"},
{Enum.NormalId.Front, front, "_Front"},
{Enum.NormalId.Back, back, "_Back"}
}
game:GetService("RunService").Heartbeat:Wait()

for _, f in ipairs(faces) do
local decal = Instance.new("Decal")
decal.Face = f[1]
decal.Texture = convertToTextureID(f[2], name..f[3])
decal.Parent = part
end
return part
end

local textures = {
Grass = {
"https://i.postimg.cc/KYDHrvvm/t-i-xu-ng.jpg",
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png",
"https://i.postimg.cc/wjJPMQCy/t-i-xu-ng-2.jpg",
"https://i.postimg.cc/wjJPMQCy/t-i-xu-ng-2.jpg",
"https://i.postimg.cc/wjJPMQCy/t-i-xu-ng-2.jpg",
"https://i.postimg.cc/wjJPMQCy/t-i-xu-ng-2.jpg"
},

Pumpkin = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/6/63/Pumpkin_%28top_texture%29_JE3.png/revision/latest?cb=20210319220442",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/7/71/Pumpkin_%28side_texture%29_JE2_BE2.png/revision/latest?cb=20201004114344",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/7/71/Pumpkin_%28side_texture%29_JE2_BE2.png/revision/latest?cb=20201004114344",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/7/71/Pumpkin_%28side_texture%29_JE2_BE2.png/revision/latest?cb=20201004114344",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/7/71/Carved_Pumpkin_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001120945",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/7/71/Pumpkin_%28side_texture%29_JE2_BE2.png/revision/latest?cb=20201004114344",
},

Dirt = {
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png",
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png",
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png",
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png",
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png",
"https://i.postimg.cc/GpCfysRM/t-i-xu-ng.png"
},
Stone = {
"https://i.postimg.cc/sxkyWDw3/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/sxkyWDw3/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/sxkyWDw3/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/sxkyWDw3/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/sxkyWDw3/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/sxkyWDw3/t-i-xu-ng-3.jpg"
},
Bedrock = {
"https://i.postimg.cc/MZMnncG2/t-i-xu-ng.png",
"https://i.postimg.cc/MZMnncG2/t-i-xu-ng.png",
"https://i.postimg.cc/MZMnncG2/t-i-xu-ng.png",
"https://i.postimg.cc/MZMnncG2/t-i-xu-ng.png",
"https://i.postimg.cc/MZMnncG2/t-i-xu-ng.png",
"https://i.postimg.cc/MZMnncG2/t-i-xu-ng.png"
},

Leaf = {
"https://i.postimg.cc/mrm7h67j/Background-Eraser-20250522-040055024.png",
"https://i.postimg.cc/mrm7h67j/Background-Eraser-20250522-040055024.png",
"https://i.postimg.cc/mrm7h67j/Background-Eraser-20250522-040055024.png",
"https://i.postimg.cc/mrm7h67j/Background-Eraser-20250522-040055024.png",
"https://i.postimg.cc/mrm7h67j/Background-Eraser-20250522-040055024.png",
"https://i.postimg.cc/mrm7h67j/Background-Eraser-20250522-040055024.png",
},

Oak_Log = {
"https://i.postimg.cc/fWGm3dSG/t-i-xu-ng.jpg",
"https://i.postimg.cc/fWGm3dSG/t-i-xu-ng.jpg",
"https://i.postimg.cc/sfQ5DmxP/t-i-xu-ng-2.jpg",
"https://i.postimg.cc/sfQ5DmxP/t-i-xu-ng-2.jpg",
"https://i.postimg.cc/sfQ5DmxP/t-i-xu-ng-2.jpg",
"https://i.postimg.cc/sfQ5DmxP/t-i-xu-ng-2.jpg",
},

Sand = {
"https://i.postimg.cc/85Pk0zDS/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/85Pk0zDS/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/85Pk0zDS/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/85Pk0zDS/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/85Pk0zDS/t-i-xu-ng-3.jpg",
"https://i.postimg.cc/85Pk0zDS/t-i-xu-ng-3.jpg",
},

White_Glass = {
"https://img.itch.zone/aW1hZ2UvMjM4NjE0Mi8xNDEyNTc4OC5wbmc=/original/L6dgyC.png",
"https://img.itch.zone/aW1hZ2UvMjM4NjE0Mi8xNDEyNTc4OC5wbmc=/original/L6dgyC.png",
"https://img.itch.zone/aW1hZ2UvMjM4NjE0Mi8xNDEyNTc4OC5wbmc=/original/L6dgyC.png",
"https://img.itch.zone/aW1hZ2UvMjM4NjE0Mi8xNDEyNTc4OC5wbmc=/original/L6dgyC.png",
"https://img.itch.zone/aW1hZ2UvMjM4NjE0Mi8xNDEyNTc4OC5wbmc=/original/L6dgyC.png",
"https://img.itch.zone/aW1hZ2UvMjM4NjE0Mi8xNDEyNTc4OC5wbmc=/original/L6dgyC.png",
},

Crafting_Table = {
"https://i.postimg.cc/5NpQ3yzf/images-1.jpg",
"https://i.postimg.cc/Dy7bLL8C/t-i-xu-ng-1.jpg",
"https://i.postimg.cc/vZyWZCdN/images-3.jpg",
"https://i.postimg.cc/zfkP0nqx/images-2.jpg",
"https://i.postimg.cc/vZyWZCdN/images-3.jpg",
"https://i.postimg.cc/zfkP0nqx/images-2.jpg"
},

Structure_Void = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/e/e6/Structure_Void_%28texture%29_BE1.png/revision/latest?cb=20200922185859",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/e/e6/Structure_Void_%28texture%29_BE1.png/revision/latest?cb=20200922185859",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/e/e6/Structure_Void_%28texture%29_BE1.png/revision/latest?cb=20200922185859",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/e/e6/Structure_Void_%28texture%29_BE1.png/revision/latest?cb=20200922185859",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/e/e6/Structure_Void_%28texture%29_BE1.png/revision/latest?cb=20200922185859",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/e/e6/Structure_Void_%28texture%29_BE1.png/revision/latest?cb=20200922185859"
},

Cobblestone = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c0/Cobblestone_%28texture%29_pTU20181129.png/revision/latest/thumbnail-down/width/200/height/200?cb=20200920155949",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c0/Cobblestone_%28texture%29_pTU20181129.png/revision/latest/thumbnail-down/width/200/height/200?cb=20200920155949",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c0/Cobblestone_%28texture%29_pTU20181129.png/revision/latest/thumbnail-down/width/200/height/200?cb=20200920155949",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c0/Cobblestone_%28texture%29_pTU20181129.png/revision/latest/thumbnail-down/width/200/height/200?cb=20200920155949",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c0/Cobblestone_%28texture%29_pTU20181129.png/revision/latest/thumbnail-down/width/200/height/200?cb=20200920155949",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c0/Cobblestone_%28texture%29_pTU20181129.png/revision/latest/thumbnail-down/width/200/height/200?cb=20200920155949",
},

Block_of_Iron = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5b/Block_of_Iron_%28texture%29_JE3_BE3.png/revision/latest?cb=20201006053737",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5b/Block_of_Iron_%28texture%29_JE3_BE3.png/revision/latest?cb=20201006053737",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5b/Block_of_Iron_%28texture%29_JE3_BE3.png/revision/latest?cb=20201006053737",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5b/Block_of_Iron_%28texture%29_JE3_BE3.png/revision/latest?cb=20201006053737",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5b/Block_of_Iron_%28texture%29_JE3_BE3.png/revision/latest?cb=20201006053737",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5b/Block_of_Iron_%28texture%29_JE3_BE3.png/revision/latest?cb=20201006053737",
},

Block_of_Gold = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/2/2d/Block_of_Gold_%28texture%29_JE5_BE3.png/revision/latest?cb=20201001120858",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/2/2d/Block_of_Gold_%28texture%29_JE5_BE3.png/revision/latest?cb=20201001120858",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/2/2d/Block_of_Gold_%28texture%29_JE5_BE3.png/revision/latest?cb=20201001120858",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/2/2d/Block_of_Gold_%28texture%29_JE5_BE3.png/revision/latest?cb=20201001120858",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/2/2d/Block_of_Gold_%28texture%29_JE5_BE3.png/revision/latest?cb=20201001120858",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/2/2d/Block_of_Gold_%28texture%29_JE5_BE3.png/revision/latest?cb=20201001120858",
},

Block_of_Diamond = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/b/b4/Block_of_Diamond_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001120845",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/b/b4/Block_of_Diamond_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001120845",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/b/b4/Block_of_Diamond_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001120845",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/b/b4/Block_of_Diamond_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001120845",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/b/b4/Block_of_Diamond_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001120845",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/b/b4/Block_of_Diamond_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001120845",
},

Glowstone = {
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c7/Glowstone_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001134117",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c7/Glowstone_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001134117",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c7/Glowstone_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001134117",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c7/Glowstone_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001134117",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c7/Glowstone_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001134117",
"https://static.wikia.nocookie.net/minecraft_gamepedia/images/c/c7/Glowstone_%28texture%29_JE4_BE3.png/revision/latest?cb=20201001134117",
},

Barrier = {"", "", "", "", "", "",}, Snow = {"", "", "", "", "", ""}, Fire = {"", "", "", "", "", ""}, Lower_Grass = {"", "", "", "", "", ""}, Ladder = {"", "", "", "", "", ""},

Obsidian = {"https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5a/Obsidian_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001140204", "https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5a/Obsidian_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001140204", "https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5a/Obsidian_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001140204", "https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5a/Obsidian_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001140204", "https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5a/Obsidian_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001140204", "https://static.wikia.nocookie.net/minecraft_gamepedia/images/5/5a/Obsidian_%28texture%29_JE3_BE2.png/revision/latest?cb=20201001140204",},
}

local preloadBlocks = {
	"Leaf", "Oak_Log", "Dirt", "Grass", "Stone", "Bedrock"
}

for _, blockName in ipairs(preloadBlocks) do
	task.spawn(function()
		local texSet = textures[blockName]
		if texSet then
			for i, tex in ipairs(texSet) do
				convertToTextureID(tex, blockName .. "_Face" .. i)
				if i % 500 == 0 then task.wait() end
			end
		end
	end)
end

task.spawn(function()
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
end)

local blockMap = {}
local generatedChunks = {}
local function vecToStr(v) return string.format("%d_%d_%d", v.X, v.Y, v.Z) end
local function chunkKey(x, z) return tostring(x//40).."_"..tostring(z//40) end

local function isTransparentBlock(neighbor)
	return neighbor and (
		neighbor.Name == "Lower_Grass" or 
		neighbor.Name == "Leaf" or 
		neighbor.Name == "White_Glass" or 
		neighbor.Name == "Structure_Void" or neighbor.Name == "Ladder"
	)
end

local function isSurrounded(pos)
	local directions = {
		Vector3.new(4, 0, 0), Vector3.new(-4, 0, 0),
		Vector3.new(0, 4, 0), Vector3.new(0, -4, 0),
		Vector3.new(0, 0, 4), Vector3.new(0, 0, -4)
	}
	for _, dir in ipairs(directions) do
		local checkPos = pos + dir
		local neighbor = blockMap[vecToStr(checkPos)]
		if not neighbor or isTransparentBlock(neighbor) then
			return false
		end
	end
	return true
end

local faceOffsets = {
	Top = {Enum.NormalId.Top, Vector3.new(0, 4, 0)},
	Bottom = {Enum.NormalId.Bottom, Vector3.new(0, -4, 0)},
	Right = {Enum.NormalId.Right, Vector3.new(4, 0, 0)},
	Left = {Enum.NormalId.Left, Vector3.new(-4, 0, 0)},
	Front = {Enum.NormalId.Front, Vector3.new(0, 0, -4)},
	Back = {Enum.NormalId.Back, Vector3.new(0, 0, 4)},
}

local function updateVisibility(pos, block)
	block.Transparency = isSurrounded(pos) and 1 or 0

	for _, d in ipairs(block:GetChildren()) do
		if d:IsA("Decal") then
			for _, info in pairs(faceOffsets) do
				local normalId, offset = unpack(info)
				if d.Face == normalId then
					local neighborPos = pos + offset
					local neighbor = blockMap[vecToStr(neighborPos)]
					local isBlocked = neighbor and not isTransparentBlock(neighbor)
					d.Transparency = (block.Transparency == 1 or isBlocked) and 1 or 0
					break
				end
			end
		end
	end
end

local function updateNeighbors(pos)
	local directions = {
		Vector3.new(4, 0, 0), Vector3.new(-4, 0, 0),
		Vector3.new(0, 4, 0), Vector3.new(0, -4, 0),
		Vector3.new(0, 0, 4), Vector3.new(0, 0, -4)
	}
	for _, dir in ipairs(directions) do
		local neighborPos = pos + dir
		local neighborBlock = blockMap[vecToStr(neighborPos)]
		if neighborBlock and not isTransparentBlock(neighborBlock) then
			updateVisibility(neighborPos, neighborBlock)
		end
	end
end

local function isNearRoot(pos)
	local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	if not root then return false end
	return (pos - root.Position).Magnitude <= 0
end

local function spawnBlock(name, tex, pos)
	local key = vecToStr(pos)
	if blockMap[key] then return end

	local block = Instance.new("Part")
block.Transparency = 1
	block.Name = name
	block.Size = Vector3.new(4,4,4)
	block.Anchored = true
	block.Position = pos
block.Material = Enum.Material.SmoothPlastic
block.Color = Color3.new(1, 1, 1)
	block.Parent = lua
	blockMap[key] = block

	if isNearRoot(pos) then
		local faces = {
			{Enum.NormalId.Top, tex[1]}, {Enum.NormalId.Bottom, tex[2]},
			{Enum.NormalId.Right, tex[3]}, {Enum.NormalId.Left, tex[4]},
			{Enum.NormalId.Front, tex[5]}, {Enum.NormalId.Back, tex[6]}
		}
		for i, f in ipairs(faces) do
			local decal = Instance.new("Decal")
			decal.Face = f[1]
			decal.Texture = convertToTextureID(f[2], name .. "_Face" .. i)
			decal.Parent = block
		end
	end

	updateVisibility(pos, block)
	updateNeighbors(pos)

	block.AncestryChanged:Connect(function(_, parent)
		if not parent then
			blockMap[key] = nil
			updateNeighbors(pos)
		end
	end)
end

local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local player = game.Players.LocalPlayer

local MIN_FPS = 60
local MAX_FRAME_TIME = 1 / MIN_FPS

local loadingChunks = 0
local chunkLoadHistory = {}
local generatedChunks = {}
local chunkQueue = {}
local chunkActive = false

local function chunkKey(cx, cz)
	return tostring(cx) .. "," .. tostring(cz)
end

local function spawnDelayedBlock(name, tex, pos, delay)
	task.spawn(function()
		if delay > 0 then task.wait(delay) end
		spawnBlock(name, tex, pos)
	end)
end

local function getChunkDelay(cx, cz)
	local key = chunkKey(cx, cz)
	if chunkLoadHistory[key] then return 0 end
	local baseDelay = 0.005
	local chunkCount = 0
	for _ in pairs(generatedChunks) do chunkCount += 1 end
	local delay = baseDelay * (1 + (chunkCount / 20))
	return math.min(delay, MAX_FRAME_TIME * 0.5)
end

local function showChunkNotification()
if _G.sendMessage then
	_G.sendMessage("Chunk still loading. You may encounter high performance issues", Color3.new(255, 255, 255))
task.wait(0.2)
	_G.sendMessage("Some functions in the game are delayed.", Color3.new(255, 255, 255))
end
end

local GB = Instance.new("Folder", SETTING)
GB.Name = "GRASS"
local GRASS_BATCH = Instance.new("NumberValue", GB)
GRASS_BATCH.Name = "GRASS_BATCH"
GRASS_BATCH.Value = 100

local DB = Instance.new("Folder", SETTING)
DB.Name = "DIRT"
local DIRT_BATCH = Instance.new("NumberValue", DB)
DIRT_BATCH.Name = "DIRT_BATCH"
DIRT_BATCH.Value = 200

local BB = Instance.new("Folder", SETTING)
BB.Name = "BEDROCK"
local BEDROCK_BATCH = Instance.new("NumberValue", BB)
BEDROCK_BATCH.Name = "BEDROCK_BATCH"
BEDROCK_BATCH.Value = 100

local SEED = math.random(1, 20000)
local playerSpawned = false

local function generateChunk(cx, cz)
	local key = chunkKey(cx, cz)
	if generatedChunks[key] then return end
	generatedChunks[key] = true
	chunkLoadHistory[key] = true
	loadingChunks += 1
	if loadingChunks == 1 then showChunkNotification() end
	local delay = 0.01
	local TREE_CHANCE = 0.007
	local grassBlocks = {}
	local dirtBlocks = {}
	local stoneBlocks = {}
	local bedrockBlocks = {}

	for x = cx, cx + 76, 4 do
		for z = cz, cz + 76, 4 do
			table.insert(bedrockBlocks, { name = "Bedrock", tex = textures.Bedrock, pos = Vector3.new(x, 0, z) })
			local noise = math.noise((x + SEED) * 0.008, (z + SEED) * 0.008)
			local totalHeight = math.floor((noise * 10 + 40) / 4) * 4
			totalHeight = math.clamp(totalHeight, 16, 72)
			local stoneHeight = math.random(6, 10) * 4
			local dirtHeight = math.random(3, 5) * 4
			local grassY = 4 + stoneHeight + dirtHeight
			if grassY + 4 > totalHeight then
				stoneHeight = 16
				dirtHeight = totalHeight - 20
				if dirtHeight < 4 then dirtHeight = 4 end
				grassY = 4 + stoneHeight + dirtHeight
			end

			for y = 4, 4 + stoneHeight - 1, 4 do
				table.insert(stoneBlocks, { name = "Stone", tex = textures.Stone, pos = Vector3.new(x, y, z) })
			end

			for y = 4 + stoneHeight, grassY - 4, 4 do
				table.insert(dirtBlocks, { name = "Dirt", tex = textures.Dirt, pos = Vector3.new(x, y, z) })
			end

			local grassPos = Vector3.new(x, grassY, z)
			table.insert(grassBlocks, { name = "Grass", tex = textures.Grass, pos = grassPos })

			if math.random() < 0.03 then
				table.insert(grassBlocks, { name = "Lower_Grass", tex = textures.Lower_Grass, pos = grassPos + Vector3.new(0, 4, 0) })
			end

			local makeTree = math.random() < TREE_CHANCE and x % 8 == 0 and z % 8 == 0
			if makeTree then
				local trunkHeight = math.random(2, 4)
				local leafSize = math.random(1, 2)
				local top = grassY + trunkHeight * 4

				for i = 1, trunkHeight do
					table.insert(grassBlocks, { name = "Oak_Log", tex = textures.Oak_Log, pos = grassPos + Vector3.new(0, i * 4, 0) })
				end

				for dx = -leafSize, leafSize do
					for dz = -leafSize, leafSize do
						for dy = 0, 1 do
							local lx = x + dx * 4
							local lz = z + dz * 4
							local ly = top + dy * 4
							table.insert(grassBlocks, { name = "Leaf", tex = textures.Leaf, pos = Vector3.new(lx, ly, lz) })
						end
					end
				end

				if leafSize == 1 then
					table.insert(grassBlocks, { name = "Leaf", tex = textures.Leaf, pos = Vector3.new(x, top + 8, z) })
				elseif leafSize == 2 then
					for dx = -1, 1 do
						for dz = -1, 1 do
							local lx = x + dx * 4
							local lz = z + dz * 4
							local ly = top + 8
							table.insert(grassBlocks, { name = "Leaf", tex = textures.Leaf, pos = Vector3.new(lx, ly, lz) })
						end
					end
				end
			end

			if not playerSpawned and x == cx + 40 and z == cz + 40 then
				playerSpawned = true
				local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
				if hrp then
					hrp.CFrame = CFrame.new(x, grassY + 5, z)
				end
			end
		end
	end

	task.defer(function()
		for i = 1, #grassBlocks, GRASS_BATCH.Value do
			for j = i, math.min(i + GRASS_BATCH.Value - 1, #grassBlocks) do
				local block = grassBlocks[j]
				spawnBlock(block.name, block.tex, block.pos)
			end
			task.wait(delay)
		end
		loadingChunks -= 1
	end)

	task.defer(function()
		for i = 1, #dirtBlocks, DIRT_BATCH.Value do
			for j = i, math.min(i + DIRT_BATCH.Value - 1, #dirtBlocks) do
				local block = dirtBlocks[j]
				spawnBlock(block.name, block.tex, block.pos)
			end
			task.wait(delay)
		end
	end)

	task.defer(function()
		for i = 1, #stoneBlocks, DIRT_BATCH.Value do
			for j = i, math.min(i + DIRT_BATCH.Value - 1, #stoneBlocks) do
				local block = stoneBlocks[j]
				spawnBlock(block.name, block.tex, block.pos)
			end
			task.wait(delay)
		end
	end)

	task.defer(function()
		for i = 1, #bedrockBlocks, BEDROCK_BATCH.Value do
			for j = i, math.min(i + BEDROCK_BATCH.Value - 1, #bedrockBlocks) do
				local block = bedrockBlocks[j]
				spawnBlock(block.name, block.tex, block.pos)
			end
			task.wait(delay)
		end
	end)
end

local function queueChunk(cx, cz)
	local key = chunkKey(cx, cz)
	if generatedChunks[key] or chunkQueue[key] then return end
	chunkQueue[key] = true
	table.insert(chunkQueue, { x = cx, z = cz })
end

RunService.Heartbeat:Connect(function()
	if not chunkActive and #chunkQueue > 0 then
		local next = table.remove(chunkQueue, 1)
		if next then
			chunkActive = true
			generateChunk(next.x, next.z)
			task.delay(0.05, function()
				chunkActive = false
			end)
		end
	end
end)

local lastChunkX, lastChunkZ = math.huge, math.huge

RunService.Heartbeat:Connect(function()
	local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end
	local pos = hrp.Position
	local cx = math.floor(pos.X / 80)
	local cz = math.floor(pos.Z / 80)
	if cx ~= lastChunkX or cz ~= lastChunkZ then
		lastChunkX, lastChunkZ = cx, cz
		for dx = -1, 1 do
			for dz = -1, 1 do
				local ncx = (cx + dx) * 80
				local ncz = (cz + dz) * 80
				queueChunk(ncx, ncz)
			end
		end
	end
end)

local function CreateBlockTool()
for name, tex in pairs(textures) do
local tool = Instance.new("Tool")
tool.Name = name .. "_Item"
tool.RequiresHandle = false
tool.Parent = player:WaitForChild("Backpack")
tool.ToolTip = string.gsub(name, "_", " ")

tool.Activated:Connect(function()  
    local m = player:GetMouse()  
    local tgt = m.Target  
    if tgt and m.TargetSurface then  
        local dir = Vector3.FromNormalId(m.TargetSurface)  
        local pos = tgt.Position + dir * 4  
        pos = Vector3.new(  
            math.floor(pos.X/4 + 0.5)*4,  
            math.floor(pos.Y/4 + 0.5)*4,  
            math.floor(pos.Z/4 + 0.5)*4  
        )  
          
        local distance = (pos - player.Character.HumanoidRootPart.Position).Magnitude  
        if distance <= 25 then  
            spawnBlock(name, tex, pos)  
        else  
        end  
    end  
end)
end
end

local function createSeedParticles(position, texturePath)
local particlePart = Instance.new("Part")
particlePart.Size = Vector3.new(0.2, 0.2, 0.2)
particlePart.Anchored = true
particlePart.CanCollide = false
particlePart.Transparency = 1
particlePart.Position = position
particlePart.Parent = workspace

local particleEmitter = Instance.new("ParticleEmitter")
particleEmitter.Texture = texturePath
particleEmitter.Lifetime = NumberRange.new(0.5, 0.7)
particleEmitter.Speed = NumberRange.new(10, 25)
particleEmitter.VelocitySpread = 180 
particleEmitter.Acceleration = Vector3.new(0, -200, 0) 

particleEmitter.Size = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.3),
    NumberSequenceKeypoint.new(1, 0)
})

particleEmitter.Rate = 0
particleEmitter:Emit(80)

particleEmitter.Parent = particlePart

delay(1.5, function()
    particlePart:Destroy()
end)

end

local function CreateDeleteTool()
    local tool = Instance.new("Tool")
    tool.Name = "Delete Block"
    tool.RequiresHandle = false
    tool.Parent = player:WaitForChild("Backpack")

    tool.Activated:Connect(function()
        local m = player:GetMouse()
        local tgt = m.Target
        if tgt and tgt:IsA("Part") and blockMap[vecToStr(tgt.Position)] then
            local decal = tgt:FindFirstChildWhichIsA("Decal")
            local texturePath = decal and decal.Texture or ""
            local distance = (tgt.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance <= 25 then
                createSeedParticles(tgt.Position, texturePath)
                tgt:Destroy()
            else
            end
        end
    end)
end

CreateDeleteTool() CreateBlockTool()

-- More

game:GetService("Lighting").FogEnd = 500
game:GetService("Lighting").FogStart = 50

function automaticChunkLoading()
	if _G._autoChunkRan then
		print("Cant Run Anymore! ^⁠_⁠^")
		return
	end
	_G._autoChunkRan = true
	print("Only 1!")

	local BATCHES = {GRASS_BATCH, DIRT_BATCH, BEDROCK_BATCH}
	local MinBatch = 10
	local MaxBatch = 200
	local MaxTotal = 250

	local TargetFPS = 60
	local Sensitivity = 0.8

	local function getDelta(fps)
		return math.floor((fps - TargetFPS) * Sensitivity)
	end

	local function clamp(val)
		return math.clamp(val, MinBatch, MaxBatch)
	end

	local function adjustBatches(delta)
		if math.abs(delta) > 20 then
			delta = delta > 0 and 20 or -20
		end

		for _, batch in ipairs(BATCHES) do
			local predicted = batch.Value + delta
			if predicted < MinBatch then
				delta = 0
				break
			end
		end

		local total = 0
		for _, batch in ipairs(BATCHES) do
			local newValue = clamp(batch.Value + delta)
			batch.Value = newValue
			total += newValue
		end

		if total > MaxTotal then
			for _, batch in ipairs(BATCHES) do
				local ratio = batch.Value / total
				batch.Value = clamp(math.floor(ratio * MaxTotal))
			end
		end
	end

	task.spawn(function()
		while true do
			local start = os.clock()
			task.wait(0.5)
			local fps = 1 / (os.clock() - start)
			local delta = getDelta(fps)
			if delta ~= 0 then
				adjustBatches(delta)
			end
		end
	end)
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local PROCESS_RATE = 200
local PROCESS_RATE_MIN = 20
local PROCESS_RATE_MAX = 300

local STABLE_DELAY_FAR = 0.3
local MAX_RUNNING_TASKS = math.huge

local sortedBlocks = {}
local index = 1
local needRescan = false
local isScanning = false
local debounceActive = false
local lastPartChanged = 0
local runningTasks = 0
local forceGlobalScan = false

local function isValidPart(part)
	return part:IsA("BasePart")
		and part.Transparency == 0
		and not part:FindFirstChildWhichIsA("Decal")
		and part:IsDescendantOf(Workspace.Minecraft)
end

local function getPlayerPosition()
	local player = Players.LocalPlayer
	if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		return player.Character.HumanoidRootPart.Position
	end
	return Vector3.zero
end

local function scanRegion(center, size)
	sortedBlocks = {}
	index = 1
	isScanning = true

	local region = Region3.new(center - size / 2, center + size / 2):ExpandToGrid(4)
	local parts = Workspace:FindPartsInRegion3WithIgnoreList(region, {}, math.huge)

	for _, part in ipairs(parts) do
		if isValidPart(part) then
			table.insert(sortedBlocks, {
				block = part,
				pos = part.Position,
				name = part.Name
			})
		end
	end

	isScanning = false
end

local function scanAll()
	sortedBlocks = {}
	index = 1
	isScanning = true

	for _, part in ipairs(Workspace.Minecraft:GetDescendants()) do
		if isValidPart(part) then
			table.insert(sortedBlocks, {
				block = part,
				pos = part.Position,
				name = part.Name
			})
		end
	end

	isScanning = false
end

local function scheduleRescan(partPos)
	lastPartChanged = tick()
	if debounceActive then return end

	local playerPos = getPlayerPosition()
	local distance = (partPos - playerPos).Magnitude

	if distance > 40 then
		forceGlobalScan = true
	end

	debounceActive = true
	task.spawn(function()
		local delayTime = distance > 40 and STABLE_DELAY_FAR or 0
		while tick() - lastPartChanged < delayTime do
			task.wait(0.1)
		end
		if not isScanning then
			needRescan = true
		end
		debounceActive = false
	end)
end

Workspace.Minecraft.DescendantAdded:Connect(function(part)
	if part:IsA("BasePart") then
		scheduleRescan(part.Position)
	end
end)

Workspace.Minecraft.DescendantRemoving:Connect(function(part)
	if part:IsA("BasePart") then
		scheduleRescan(part.Position)
	end
end)

local function processBlock(data)
	runningTasks += 1
	local success, err = pcall(function()
		local tex = textures[data.name]
		if tex then
			for faceIdx, faceEnum in ipairs({
				Enum.NormalId.Top, Enum.NormalId.Bottom,
				Enum.NormalId.Right, Enum.NormalId.Left,
				Enum.NormalId.Front, Enum.NormalId.Back
			}) do
				if not data.block:FindFirstChild(data.name .. "_Face" .. faceIdx) then
					local decal = Instance.new("Decal")
					decal.Name = data.name .. "_Face" .. faceIdx
					decal.Face = faceEnum
					decal.Texture = convertToTextureID(tex[faceIdx], decal.Name)
					decal.Parent = data.block
				end
			end
		end
		updateVisibility(data.pos, data.block)
		updateNeighbors(data.pos)
	end)
	runningTasks -= 1
end

local fpsCounter = 0
local lastSecond = tick()

RunService.Heartbeat:Connect(function()
	local now = tick()
	fpsCounter += 1

	if now - lastSecond >= 1 then
		local fps = fpsCounter / (now - lastSecond)
		lastSecond = now
		fpsCounter = 0

		if fps < 20 then
			PROCESS_RATE = math.max(PROCESS_RATE - 5, PROCESS_RATE_MIN)
		elseif fps > 50 then
			PROCESS_RATE = math.min(PROCESS_RATE + 5, PROCESS_RATE_MAX)
		end
	end
end)

task.defer(function()
	RunService.Heartbeat:Connect(function()
		if needRescan then
			needRescan = false
			local playerPos = getPlayerPosition()

			if forceGlobalScan then
				forceGlobalScan = false
				scanAll()
			else
				scanRegion(playerPos, Vector3.new(40, 40, 40))
			end
		end

		if runningTasks >= MAX_RUNNING_TASKS then return end

		for _ = 1, PROCESS_RATE do
			if index > #sortedBlocks or runningTasks >= MAX_RUNNING_TASKS then break end
			task.spawn(function()
				processBlock(sortedBlocks[index])
			end)
			index += 1
		end
	end)
end)

game.Players.LocalPlayer.CharacterAdded:Connect(function()
CreateDeleteTool() CreateBlockTool()
end)

-- Temporary

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local CoreGui = game:GetService("CoreGui")
local Camera = workspace.CurrentCamera

game.CoreGui.RobloxGui.Enabled = false

local gui = Instance.new("ScreenGui", CoreGui)
gui.Name = "FPSDestroyGui"
gui.ScreenInsets = Enum.ScreenInsets.None
gui.DisplayOrder = 7
gui.Enabled = true

local frame = Instance.new("Frame", gui)
frame.Name = "FullScreenFrame"
frame.Size = UDim2.new(1, 0, 1, 0)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0

local tex = Instance.new("TextLabel", frame)
tex.Text = "Preparing Resources, Please Wait!"
tex.TextSize = 20
tex.Position = UDim2.new(0, 0, 0.5, -30)
tex.Size = UDim2.new(1, 0, 0, 50)
tex.BackgroundTransparency = 1
tex.TextColor3 = Color3.new(1, 1, 1)

local urls = {
    "https://i.postimg.cc/Pvjxyrqn/panorama-0.png",
    "https://i.postimg.cc/KRQz7bSC/panorama-1.png",
    "https://i.postimg.cc/crdC8HjQ/panorama-2.png",
    "https://i.postimg.cc/BPBvV98L/panorama-3.png",
    "https://i.postimg.cc/4n6ndt8f/panorama-4.png",
    "https://i.postimg.cc/K1zYJWmj/panorama-5.png"
}

local panoramaDone = false

task.spawn(function()
	for i = 0, 5 do
		local name = "panorama_" .. i .. ".png"
		if not isfile(name) then
			writefile(name, game:HttpGet(urls[i + 1]))
		end
	end
	panoramaDone = true
end)

local filesToCheck = {}
for i = 1, 6 do
	table.insert(filesToCheck, "Dirt_Face" .. i .. ".png")
	table.insert(filesToCheck, "Grass_Face" .. i .. ".png")
	table.insert(filesToCheck, "Bedrock_Face" .. i .. ".png")
end

repeat
	local allExist = panoramaDone
	for _, file in ipairs(filesToCheck) do
		if not isfile(".TexturePack/" .. file) then
			allExist = false
			break
		end
	end
	task.wait(1)
until allExist

task.wait(1)

tex.TextColor3 = Color3.new(0.2, 0.2, 0.2)

local texts = {"Loading", "Loading.", "Loading..", "Loading..."}
task.spawn(function()
	while gui and gui.Parent do
		for _, v in ipairs(texts) do
			if not gui or not gui.Parent then return end
			tex.Text = v .. "\nSeed: " .. SEED
			task.wait(1)
		end
	end
end)

local isLoading = Lighting:FindFirstChild("IsLoading")
if not isLoading then
	isLoading = Instance.new("BoolValue")
	isLoading.Name = "IsLoading"
	isLoading.Parent = Lighting
end
isLoading.Value = true
frame.BackgroundTransparency = 1

local sky = Instance.new("Sky")
sky.Name = "MinecraftSky"
sky.SkyboxFt = getcustomasset("panorama_1.png")
sky.SkyboxRt = getcustomasset("panorama_0.png")
sky.SkyboxBk = getcustomasset("panorama_3.png")
sky.SkyboxLf = getcustomasset("panorama_2.png")
sky.SkyboxUp = getcustomasset("panorama_4.png")
sky.SkyboxDn = getcustomasset("panorama_5.png")

for _, v in pairs(Lighting:GetChildren()) do
	if v:IsA("Sky") then v:Destroy() end
end
sky.Parent = Lighting

Camera.FieldOfView = 70
local origin = Vector3.new(10000, 10000, 10000)
local radius = 50
local angle = 0

RunService.RenderStepped:Connect(function(dt)
	if isLoading.Value then
		Camera.CameraType = Enum.CameraType.Scriptable
		angle += dt * 0.1
		local pos = origin + Vector3.new(math.cos(angle) * radius, 0, math.sin(angle) * radius)
		Camera.CFrame = CFrame.new(pos, origin)
	else
		Camera.CameraType = Enum.CameraType.Custom
		sky.Parent = nil
	end
end)

local fps = 0
local lastUpdate = tick()
local warmupFrames = 0

local connection
connection = RunService.Heartbeat:Connect(function()
	local now = tick()
	local dt = now - lastUpdate
	lastUpdate = now

	if warmupFrames < 5 then
		warmupFrames += 1
		return
	end

	fps = 1 / dt

	if fps > 30 and gui then
		tex.Text = "Done!"
		task.wait()
local RunService = game:GetService("RunService")

print("Loaded!")
local text = [[
<font size="28" color="#33CCFF"><b>🔄 UPDATE!</b></font><br/><br/>

<font color="#FF9900"><b>⏳ Current Version:</b></font> <font color="#FFFFFF">Alpha 0.0.5</font><br/>
<font color="#999999"><i>Last updated: July 7, 2025</i></font><br/><br/>

<font color="#77FF77"><b>📝 Update List:</b></font><br/>
<font color="#CCCCCC">
• Optimized performance by +10%<br/>
</font><br/><br/>

<font size="22" color="#FF4444"><b>⚠️ TESTING VERSION ⚠️</b></font><br/>
<font color="#888888">_____________________</font><br/><br/>

<font color="#FFFFFF">
You are currently playing the <font color="#FFDD00"><b>Alpha version</b></font> — an early testing stage where we gather feedback and improve core systems.
</font><br/><br/>

<font color="#FF7777"><b>🚧 Please be aware:</b></font><br/>
<font color="#CCCCCC">
• <b>Bugs and crashes</b> may occur during gameplay.<br/>
• Some features are <b>unfinished or experimental</b>.<br/>
• Your map or data <b>may not be saved</b>.<br/>
• Frequent updates might change how the game works.
</font>
]]

_G.createChooseNotify(
   "ALPHA TEST",
    text,
    "STARTING GAME",
    "<4>REJOIN",
    function() end,
    function()  end
)

automaticChunkLoading()

		local char = Players.LocalPlayer.Character
		if char and char:FindFirstChild("HumanoidRootPart") then
			CoreGui.RobloxGui.Enabled = true
			char.HumanoidRootPart.Anchored = false
			if _G.sendMessage then
				_G.sendMessage(Players.LocalPlayer.Name .. " joined the game", Color3.fromRGB(255, 255, 85))
			end
		end
		isLoading.Value = false
		gui:Destroy()
		connection:Disconnect()
	end
end)
